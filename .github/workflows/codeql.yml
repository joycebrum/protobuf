name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '29 13 * * 5'

permissions: {}

jobs:
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'c-cpp', 'csharp', 'java-kotlin', 'python', 'ruby' ]
        # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 1
        submodules: 'recursive'

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@74483a38d39275f33fcff5f35b679b5ca4a26a99 # v2.22.5
      with:
        languages: ${{ matrix.language }}
  
    - name: Custom build protoc (C++) and build java
      if: matrix.language == 'java-kotlin'
      run: |
        echo "Installing bazel"
        curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
        sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
        echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        sudo apt-get update
        sudo apt-get install bazel
        echo "Building protoc"
        bazel build :protoc :protobuf
        mv bazel-bin/protoc protoc
        echo "Building Java"
        cd java
        mvn clean package -f pom.xml -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip=true -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true
    
    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    - name: Autobuild
      if: matrix.language == 'c-cpp'  ||
          matrix.language == 'csharp' ||
          matrix.language == 'python' ||
          matrix.language == 'ruby'
      uses: github/codeql-action/autobuild@74483a38d39275f33fcff5f35b679b5ca4a26a99 # v2.22.5
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@74483a38d39275f33fcff5f35b679b5ca4a26a99 # v2.22.5
      with:
        category: "/language:${{matrix.language}}"
        upload: false
        output: sarif-results

    - name: Filter SARIF C and C++
      if: matrix.language == 'c-cpp'
      uses: advanced-security/filter-sarif@bc96d9fb9338c5b48cc440b1b4d0a350b26a20db # v1.0.0
      with:
         # filter out all test files unless they contain a sql-injection vulnerability
        patterns: |
          -third_pary
        input: sarif-results/c.sarif
        output: sarif-results/${{ matrix.language }}.sarif

    - name: See files
      run: ls sarif-results/

    - name: Filter SARIF Java and Kotlin
      if: matrix.language == 'java-kotlin'
      uses: advanced-security/filter-sarif@bc96d9fb9338c5b48cc440b1b4d0a350b26a20db # v1.0.0
      with:
         # filter out all test files unless they contain a sql-injection vulnerability
        patterns: |
          -third_pary
        input: sarif-results/java.sarif
        output: sarif-results/${{ matrix.language }}.sarif
        
    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@74483a38d39275f33fcff5f35b679b5ca4a26a99 # v2.22.5
      with:
        sarif_file: sarif-results/${{ matrix.language }}.sarif

